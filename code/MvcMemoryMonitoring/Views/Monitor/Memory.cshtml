@{
    ViewBag.Title = "Memory Information";
}

<h2>PerfCounters</h2>

@using System.Diagnostics;
<!DOCTYPE html>
<html>
<head>
    <title>ASP.NET MVC Memory Monitoring</title>
</head>
<body>
    <div id="wrapper">
        <div class="content">
            <header>
                <h1>ASP.NET MVC Memory Monitoring - @ViewBag.Title</h1>
                <p>
                    This page shows you the resource memory consumption by your application as exposed through the AppDomain. 
                    It also shows the current values of several performance counters related to memory usage and ASP.NET Caching stats.
                </p>
            </header>
            <div>
                <section id="content">
                    <article>
                        <h2>Memory and CPU Consumption</h2>
                        <p class="container">
                            <ul>
                                <li><b title="Total size, in bytes, of all memory allocations that have been made by the application domain since it was created, without subtracting memory that has been collected.">Total Bytes Allocated:</b> @AppDomain.CurrentDomain.MonitoringTotalAllocatedMemorySize Bytes</li>
                                <li><b title="Total size of all memory allocations that have been made by the application domain since it was created, without subtracting memory that has been collected.">Total MB Allocated:</b> @(AppDomain.CurrentDomain.MonitoringTotalAllocatedMemorySize / 1024 / 1024) MB</li>
                                <li><b title="The number of bytes that survived the last full, blocking collection and that are known to be referenced by the current application domain.">Total Bytes In Use:</b> @AppDomain.CurrentDomain.MonitoringSurvivedMemorySize Bytes</li>
                                <li><b title="The number of bytes that survived the last full, blocking collection and that are known to be referenced by the current application domain.">Total MB In Use:</b> @(AppDomain.CurrentDomain.MonitoringSurvivedMemorySize / 1024 / 1024) MB</li>
                                <li><b>Number of entries in OutputCache:</b> @GetOutputCacheNumberOfEntries()</li>
                                <li><b>Cache Effective Private Bytes Limit:</b> @(HttpRuntime.Cache.EffectivePrivateBytesLimit) Bytes</li>
                                <li><b>Cache Effective Private Bytes Limit in MB:</b> @(HttpRuntime.Cache.EffectivePrivateBytesLimit / 1024 / 1024) MB</li>
                                <li><b title="Total processor time that has been used by all threads while executing in the current application domain, since the process started.">CPU usage:</b> @AppDomain.CurrentDomain.MonitoringTotalProcessorTime.Milliseconds Milliseconds</li>
                                <li><b title="Total processor time that has been used by all threads while executing in the current application domain, since the process started.">CPU usage:</b> @(AppDomain.CurrentDomain.MonitoringTotalProcessorTime.Milliseconds / 1000) Seconds</li>
                            </ul>
                        </p>
                    </article>
                    <article>
                        <h2>@ViewBag.Title</h2>
                        <ul>
                            @{ var perfCats = PerformanceCounterCategory.GetCategories().Where(c => c.CategoryName.StartsWith("ASP.NET Apps", StringComparison.InvariantCultureIgnoreCase)).Union(PerformanceCounterCategory.GetCategories().Where(c => c.CategoryName == "Memory")); }

                            @foreach (PerformanceCounterCategory category in perfCats.OrderBy(c => c.CategoryName))
                            {
                                <li>Category Name: @category.CategoryName
                                    <ul>
                                @{
                                //Get all instances available for category
                                string[] instances = category.GetInstanceNames();
                                if (instances.Length == 0)
                                {
                                    //This block will execute when category has no instance.
                                    //loop all the counters available withing category
                                    foreach (PerformanceCounter counter in category.GetCounters())
                                    {
                                        float value;
                                        using (PerformanceCounter perfCounter = new PerformanceCounter(category.CategoryName, counter.CounterName))
                                        {
                                            value = perfCounter.NextValue();
                                        }
                                            
                                            <li>Counter Name: @counter.CounterName   -   Value: @value</li>                                            
                                    }
                                }
                                else
                                {
                                    //This block will execute when category has one or more instances.
                                    foreach (string instance in instances)
                                    {
                                            <li>Instance Name: @instance
                                                <ul>

                                        @{//loop all the counters available withing category
                                        foreach (PerformanceCounter counter in category.GetCounters(instances[0]))
                                        {
                                            float value;
                                            using (PerformanceCounter perfCounter = new PerformanceCounter(category.CategoryName, counter.CounterName, instances[0]))
                                            {
                                                value = perfCounter.NextValue();
                                            }
                                        
                                                <li>Counter Name: @counter.CounterName   -   Value: @value</li>
                                        }
                                        }
                                                </ul>
                                            </li>
                                    }

                                }
                                
                                        }
                                    </ul>
                                </li>
                            }
                        </ul>

                    </article>
                </section>
            </div>
        </div>
        <footer>
        </footer>
    </div>
</body>
</html>

@using System.Reflection;
@functions{
    public int GetOutputCacheNumberOfEntries()
    {
        Type runtimeType = typeof(HttpRuntime);

        PropertyInfo ci = runtimeType.GetProperty("CacheInternal", BindingFlags.NonPublic | BindingFlags.Static);

        Object cache = ci.GetValue(ci, new object[0]);

        FieldInfo cachesInfo = cache.GetType().GetField("_caches", BindingFlags.NonPublic | BindingFlags.Instance);
        object cacheEntries = cachesInfo.GetValue(cache);

        List<object> outputCacheEntries = new List<object>();

        foreach (Object singleCache in cacheEntries as Array)
        {
            FieldInfo singleCacheInfo = singleCache.GetType().GetField("_entries", BindingFlags.NonPublic | BindingFlags.Instance);
            object entries = singleCacheInfo.GetValue(singleCache);

            foreach (System.Collections.DictionaryEntry cacheEntry in entries as System.Collections.Hashtable)
            {
                FieldInfo cacheEntryInfo = cacheEntry.Value.GetType().GetField("_value", BindingFlags.NonPublic | BindingFlags.Instance);
                object value = cacheEntryInfo.GetValue(cacheEntry.Value);
                if (value.GetType().Name == "CachedRawResponse")
                {
                    outputCacheEntries.Add(value);
                }
            }
        }

        return outputCacheEntries.Count;                            
    }    
}